// Generated by CoffeeScript 1.7.1
(function() {
  var MongoStore, app, async, authorize, bodyParser, bootable, config, cookieParser, express, expressWinston, favicon, http, log, moment, mongoose, passport, server, session, uuid, winston;

  express = require('express');

  http = require('http');

  passport = require('passport');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  session = require('express-session');

  expressWinston = require('express-winston');

  log = require('winston-wrapper')(module);

  winston = require('winston');

  config = require('cnf');

  bootable = require('bootable');

  favicon = require('serve-favicon');

  mongoose = require('mongoose');

  authorize = require('./middleware/authorizeRole');

  moment = require('moment');

  uuid = require('node-uuid');

  async = require('async');

  MongoStore = require('connect-mongo')(session);

  app = bootable(express());

  server = http.createServer(app);

  app.use(favicon(__dirname + '/client/img/favicon.png'));

  app.set('views', __dirname + '/views');

  app.set('view engine', 'jade');

  app.use(express["static"](__dirname + '/client'));

  app.use(cookieParser(config.cookieSecret));

  app.use(bodyParser());

  app.use(session({
    secret: config.sessionSecret,
    store: new MongoStore({
      url: config.mongoUrl
    }),
    maxAge: 3600 * 24 * 2
  }));

  app.use(passport.initialize());

  app.use(passport.session());

  app.phase(bootable.initializers('setup/initializers/'));

  app.all('/', function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");
    return next();
  });

  app.get('/', authorize(), function(req, res) {
    var User;
    User = mongoose.model('user');
    return User.find(function(err, users) {
      res.viewData.users = users;
      return res.render('home', res.viewData);
    });
  });

  app.get('/admin', authorize('admin'), function(req, res, next) {
    var Medicine, User;
    User = mongoose.model('user');
    Medicine = mongoose.model('medicine');
    return User.find(function(err, users) {
      if (err) {
        return next(err);
      }
      res.viewData.users = users;
      return Medicine.find(function(err, medicines) {
        if (err) {
          return next(err);
        }
        res.viewData.medicines = medicines;
        return res.render('admin', res.viewData);
      });
    });
  });

  app.post('/admin/generatemedcine', authorize('admin'), function(req, res, next) {
    var Medicine, count, createCode;
    count = parseInt(req.body.count) || 0;
    if (!((0 < count && count < 101))) {
      return next(new Error("Сірьожа, '" + count + "' не канає, не більше 100, не менше 1"));
    }
    Medicine = mongoose.model('medicine');
    createCode = function(cb) {
      var medicine;
      medicine = new Medicine({
        code: uuid.v4().substr(0, 13),
        generated: new Date()
      });
      return medicine.save(cb);
    };
    return async.times(count, function(n, next) {
      return createCode(next);
    }, function(err, codes) {
      if (err) {
        return next(err);
      }
      console.log("generated " + codes.length + " medicine codes");
      return res.redirect('/admin');
    });
  });

  app.post('/human/submitMedicine', authorize('human'), function(req, res, next) {
    var Medicine, User, code;
    code = req.body.code;
    Medicine = mongoose.model('medicine');
    User = mongoose.model('user');
    if (!code) {
      return next(new Error('Code should be provided'));
    }
    return Medicine.findOneAndUpdate({
      'code': code,
      'usedBy': {
        $exists: false
      }
    }, {
      usedBy: req.user.vkontakteId,
      usedTime: new Date()
    }, function(err, data) {
      if (err) {
        return next(err);
      }
      if (data) {
        return User.findOneAndUpdate({
          'vkontakteId': req.user.vkontakteId
        }, {
          lastActionDate: new Date()
        }, function(err, data) {
          if (err) {
            return next(err);
          }
          res.viewData.data = "Все збс";
          return res.render('profile', res.viewData);
        });
      } else {
        res.viewData.err = "Миша, все хуйня";
        return res.render('profile', res.viewData);
      }
    });
  });

  app.post('/zombie/submitHuman', authorize('zombie'), function(req, res, next) {
    var User, hash;
    hash = req.body.hash;
    User = mongoose.model('user');
    if (!hash) {
      return next(new Error('Hash should be provided'));
    }
    return User.findOneAndUpdate({
      'hash': hash
    }, {
      getZombie: new Date(),
      lastActionDate: new Date()
    }, function(err, data) {
      if (err) {
        return next(err);
      }
      if (data) {
        return User.findOneAndUpdate({
          'vkontakteId': req.user.vkontakteId
        }, {
          lastActionDate: new Date()
        }, function(err, data) {
          if (err) {
            return next(err);
          }
          res.viewData.data = "Все збс";
          return res.render('profile', res.viewData);
        });
      } else {
        res.viewData.err = "Миша, все хуйня";
        return res.render('profile', res.viewData);
      }
    });
  });

  app.get('/auth/vkontakte', passport.authenticate('vkontakte', {
    scope: ['friends']
  }), function(req, res) {
    return res.redirect('/');
  });

  app.get('/auth/vkontakte/callback', passport.authenticate('vkontakte', {
    failureRedirect: '/'
  }), function(req, res) {
    return res.redirect('/');
  });

  app.get('/logout', function(req, res) {
    req.logout();
    return res.redirect('/');
  });

  app.get('/teamHuman', authorize('human'), function(req, res) {
    res.viewData.title = 'Команда зомби';
    res.viewData.vkAppId = config.vk.appId;
    return res.render('team', res.viewData);
  });

  app.get('/teamZombie', authorize('zombie'), function(req, res) {
    res.viewData.title = 'Команда людей';
    res.viewData.vkAppId = config.vk.appId;
    return res.render('team', res.viewData);
  });

  app.get('/profile', authorize('any'), function(req, res) {
    res.viewData.timer = 3600 * 24;
    return res.render('profile', res.viewData);
  });

  app.get('/rules', authorize(), function(req, res) {
    return res.render('rules', res.viewData);
  });

  app.use(function(req, res) {
    return res.status(404).render('404', {
      title: '404: Page Not Found'
    });
  });

  app.use(expressWinston.errorLogger({
    transports: [
      new winston.transports.Console({
        colorize: true
      })
    ]
  }));

  app.use(function(err, req, res, next) {
    return res.status(500).render('500', {
      title: '500: server error',
      message: err
    });
  });

  app.boot(function(err) {
    var port;
    if (err) {
      console.error(err);
    }
    port = config.http.port;
    server.listen(port);
    return console.info('server started at ' + config.http.siteUrl + ' '.green);
  });

}).call(this);

//# sourceMappingURL=app.map
